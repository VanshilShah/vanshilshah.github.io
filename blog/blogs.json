{   
    "page" : {
        "title" : "Vanshil Shah",
        "links" : 
        [  
            {
                "title": "About me",
                "value": "../index.html"
            },
            {
                "title": "Blogs",
                "value": "./all.html"
            }
        ]
    },
    "blogs" : [
    {
        "name" : "all",
        "image": "images/peru.jpg",
        "date" : "",
        "sections" : [
            {"type" : "text", "value" : "Hi, my name is Vanshil, I'm a Software Engineer at Google and a recent graduate from University of Toronto. I've started these blogs as a medium to share career advice and travel guides. Check out my most recent blog post!"}
        ]
    },
    {
        "name": "Coding Interviews Unravelled",
        "image": "images/interview.jpg",
        "date": "December 10th, 2019",
        "sections": [
            {"type" : "text", "value" : "When people reach out to me, the message I get most often is:"},
            {"type" : "text", "value" : "<b><i>\"Hey, I have an interview with XYZ Company next week, any advice for coding interviews?\"</i></b>"},
            {"type" : "text", "value" : "My answer is almost always, <b><i>\"I'll mock interview you.\"</i></b>"},
            {"type" : "text", "value" : "I've been conducting quite a few mock coding interviews over the past few months. It's time to share the feedback I've found myself repeating to each interviewee."},
            {"type" : "header", "value" : "An Anecdote"},
            {"type" : "text", "value" : "On February 1st 2017, I received an email:"},
            {"type" : "text", "value" : "<b><i>\"Hey this is Uber, we saw your resume and we'd like to interview you two weeks from now!\"</i></b> I had just gotten home from my first ever technical interview for a startup in Toronto. They'd asked me to find duplicate elements in a list and I wasn't able to produce the solution. The interviewer literally had to tell me to <b><i>\"use a hash map to complete the process in O(n) time\"</i></b>. I had two weeks to prepare for the biggest opportunity in my career. What followed was a set of decisions and actions that resulted in me landing my first job in Silicon Valley."},
            {"type" : "header", "value" : "Preparation"},
            {"type" : "text", "value" : "You have two weeks to prepare for the biggest interview of your career! What do you do? You need to yield the most output from your time in the coming days. You need to be cutthroat with inefficiencies and optimize your learnings. In all areas of preparation, remember:"},
            {"type" : "text", "value" : "<a href=\"https://science.ubc.ca/students/blog/how-to-increase-your-productivity-by-doing-less\"> 80% of the results come from 20% of the efforts.</a>"},
            {"type" : "text", "value" : "80% of the problems are solved with 20% of the concepts."},
            {"type" : "text", "value" : "80% of the interview score comes from 20% of the time."},
            {"type" : "header2", "value" : "1. Get a copy of \"Cracking the Coding Interview\""},
            {"type" : "text", "value" : "CTCI is the Bible for coding interviews. It's $30 on Amazon, and well worth the investment. Plus, if you actually buy it, you'll feel an obligation to read it!"},
            {"type" : "text", "value" : "Carry this book everywhere you go. Read it on the bus. Read it before you sleep. Read it on the toilet."},
            {"type" : "text", "value" : "I acknowledge its a dense book so here is my list on must read chapters:"},
            {"type" : "text-list", "value": [
                "<b>Introduction</b>",
                "<b>I: The Interview Process</b>",
                "<b>II: Behind the Scenes</b>",
                "- If relevant to your interview",
                "<b>VI: Big O</b>",
                "- Even if you've learnt it in school. Relearn it.",
                "<b>VII: Technical Questions</b>",
                "- This is my favourite chapter, read it twice if you have the time",
                "<b>IX: Data Structures: 1-4, 7-10</b>",
                "- For the chapters here you don't need to go through <b><i>\"Interview Questions\"</i></b> sections. Although, definitely make sure you understand the examples they solve before that section.",
                "<b>XI: Advanced Topics</b>",
                "- If you have fundamentals in CS theory, or have a lot of time, these advance topics can occasionally come clutch. If it feels too dense, skip this chapter, the ROI on your time is not worth it. 80% of problems don't require these concepts."
                ]},
            {"type" : "header2", "value" : "2. Seek mentorship."},
            {"type" : "text", "value" : "Message every person you know who has passed a technical interview at a large tech company. This point is so often overlooked but its value is clear. You get to tap into their learnings without wasting time making the same mistakes. Ask them for an hour of their time (more if you can). Get them to mock interview you and provide feedback."},
            {"type" : "text", "value" : "I did exactly this. I messaged everyone I knew by name who had interned at a respectable company, 5 people in total. Want to know the best part? Not a single one of them turned me down."},
            {"type" : "text", "value" : "People are more willing to give advice than you'd expect."},
            {"type" : "header2", "value" : "3. Focus on problem solving."},
            {"type" : "text", "value" : "One preparation strategy is to learn as many problems as you can find. This technique can work if you can remember \"the trick\" to a bunch of problems. The trick is usually knowing which data structure to use, or which algorithm to apply. This isn't enough. You'll hear all types of stories from your peers about how they <b><i>\"knew the answer, but couldn't code it out\"</i></b>."},
            {"type" : "text", "value" : "In my case, I attempted about 25 Leetcode questions in the two weeks before my interviews. That's 25 questions total between my preparations for Uber, Facebook and Google. This is wildly on the lower end for preparation. Yet, I succeeded because I focused on problem solving and communication. When doing mock interviews, I was improving my communication. I was learning about which thoughts I should share, and which bad ideas I should keep to myself. I built a structured strategy to solving coding problems and followed it to success."},
            {"type" : "text", "value" : "The \"Technical Questions\" chapter in CTCI is a great start to figuring out your own strategy. While practicing problems, look back and think about your approach. Which realizations did you struggle to come across? Which options did you not consider? Which parts of the problem did you struggle to figure out, or struggle to code out?"},
            {"type" : "header2", "value" : "4. Strengthen your communication skills."},
            {"type" : "text", "value" : "Communication is a key skill evaluated during a coding interview. Every line of code written should be explained to the interviewer. The benefits of this are two-fold. Firstly, you ensure the interviewer is following along. Second, you double check yourself. If you say something that doesn't make sense, you've caught yourself making a mistake. Make it a habit to refer back to the inputs of your calculations. This is another technique that improves understanding and forces you to double check. For example:"},
            {"type" : "text", "value" : "<b><i>\"We'll use X and Y here to compute Z. X comes from the previous iteration of the loop and Y is the element we extracted during this iteration.\"</i></b>"},
            {"type" : "text", "value" : "As with training your muscles in the gym, the key to strengthening this skill is isolation."},
            {"type" : "text-list", "value": [
                "- Look back at a simple problem you already know how to solve.",
                "- Attempt to program the solution as if you were explaining your code to an interviewer.",
                "- Note down areas where you struggled to get your thoughts across.",
                "- Repeat until it's perfect.",
                "- Move on to more complex problems."
                ]},
            {"type" : "header2", "value" : "5. Practice using recognizable terms"},
            {"type" : "text", "value" : "The large bulk of concepts and techniques can be boiled down into simpler terms. What do I mean by this? Imagine a problem requires you to use a sliding window to analyze a list. You could communicate this by saying:"},
            {"type" : "text", "value" : "<b><i>\"Weâ€™ll use a pointer on the left side of the list and one a few indices later and then we'll move the left one to the right if the element there is odd, and we'll move the right one if the element is even.\"</i></b>"},
            {"type" : "text", "value" : "Notice how this sentence is difficult to read and even harder to comprehend? Instead you could say:"},
            {"type" : "text", "value" : "<b><i>\"We'll be using a sliding window to scan through the list. We will increment the beginning pointer on odd numbers and the end pointer on even numbers\"</i></b>"},
            {"type" : "text", "value" : "The trick is to use standard terms that show your ideas in a recognizable manner. Both sentences describe using a sliding window and incrementing the pointers. Yet, the second one actually mentions the terms. The interviewer will immediately understand your approach and be able to provide feedback or ask further questions. Here is another example:"},
            {"type" : "text", "value" : "Good: <b><i>\"We'll be iterating through the list and on each iteration we will compute X. If Y is greater than Z then we know X to be true for that iteration.\"</i></b>"},
            {"type" : "text", "value" : "Bad: <b><i>\"We'll be going through the list and every time we go through the list we'll check Y and Z and if Z is greater than Y then we'll know that X is true for that time.\"</i></b>"},
            {"type" : "text", "value" : "The first sentence practically reads off as code, the second one is hard to follow."},
            {"type" : "text", "value" : "Most of these terms come straight from chapters and strategies mentioned in CTCI. You can practice communicating these concepts using point 4. This method is great because it sets you up to program the solution with the same building blocks."},
            {"type" : "header2", "value" : "6. Practice templates for different algorithms"},
            {"type" : "text", "value" : "Much like the previous point, this point relies on <b><i>\"chunking\"</i></b>. <a href=\"https://en.wikipedia.org/wiki/Chunking_(psychology)\">Chunking</a> is a psychological strategy our brains use to group together information. We can recall the details of the chunk simply by recalling the name of that specific chunk."},
            {"type" : "text", "value" : "When it comes to algorithms, the fundamental code usually follows a pattern. In fact the underlying pattern is usually how you'll learn the algorithm in class. Why not commit these patterns as templates in your memory? Sticking to a template results in less mistakes and faster coding time."},
            {"type" : "text", "value" : "As an excercise, analyze solutions to 3 problems involving recursion. Try and structure the code so they all follow a similar pattern. The common code between the solutions is the template you should use. The other lines of code are examples of variations you can apply to adapt the template to the problem."},
            {"type" : "text", "value" : "The final benefit will come in your communication. Knowing the algorithm template ensures you use the correct terms when explaining."},
            {"type" : "header2", "value" : "7. Know your interview language."},
            {"type" : "text", "value" : "The programming language you chose for your interview is crucial to your performance. I prefer using Python because of its versatility and concise syntax. Regardless of which language you choose, make sure you're comfortable with it. Make a cheatsheet of trivial procedures and memorize it. You should not need to figure out these things during your interview."},
            {"type" : "text", "value" : "A good example is inserting an element at a specific index within a list. It's very easy to be <b><i>off by one</i></b> while implementing this. You exhibit experience and mastery when you can code these subtasks in your first try. Much like the template advice above, this practice also ensures you make less mistakes during an interview."},
            {"type" : "header2", "value" : "8. Study the theory."},
            {"type" : "text", "value" : "This point is doubling down on reading CTCI. Make sure you're familiar with data structures, algorithms and their time/space complexities. Data structures and algorithms are like tools you can use in your toolbox. Time and space complexities are like the specifications for the tool.  You need to know both because it will impact your decision on using that tool for a given task."},
            {"type" : "text", "value" : "Make sure you know the time complexity of your algorithm. For any potential solution you provide, donâ€™t forget to mention the time complexity. This looks very good on an interview and it forces you to be thoughtful of your decisions. Go in with the assumption that an interviewer is always going to ask you the time complexity. With that in mind try to proactively mention it as you describe solutions. This indicates to the interviewer that you're thinking about the time complexity."},
            {"type" : "text", "value" : "<b><i>I had an instance where an interviewee struggled to decide between two approaches. It wasn't until I asked him the time complexities that he realized, they had the same time complexity.</i></b>"},
            {"type" : "text", "value" : "Thinking proactively simplifies your decisions during an interview. You'll also be more confident you made the right choice."},
            {"type" : "header", "value" : "The Interview"},
            {"type" : "text", "value" : "I mentioned earlier that I have a structured strategy for solving coding problems. A lot of this was initially based off of the strategies outlined in CTCI. I still recommend you check that book out. This structure worked well for me, you should take it and adapt to your strengths."},
            {"type" : "header2", "value" : "1. Repeat the problem to the interviewer in your own words."},
            {"type" : "text", "value" : "The key is to use your own words so that you ensure you understand the problem. Regurgitating the problem as stated doesn't achieve anything. The interviewer will correct your misunderstandings. This is also the part where you confirm behaviour for edge cases and clarify any assumptions you make."},
            {"type" : "header2", "value" : "2. Provide a brute force solution."},
            {"type" : "text", "value" : "Make sure it actually solves the problem and you provide the time complexity. This solution should come very quickly and it will do two things."},
            {"type" : "text-list", "value" : [
                "1. Confirm you understand the problem.",
                "2. Give you a base solution to work off and optimize"
                ]},
            {"type" : "text", "value" : "If your solution doesn't work the interviewer will hint that something is wrong. Interviewers want you to succeed on the interview. Pay attention and catch any hints they sneak in."},
            {"type" : "header2", "value" : "3. Solve the problem as a human."},
            {"type" : "text", "value" : "This is honestly my favourite take-away from CTCI. Our brains adapted for problem solving and we can often replicate our solutions with code. A good example is searching for a page number in a book. Most people will flip to halfway through the book, look at the page number and then repeat in a smaller half until they get close enough to rifle through the pages. This is an occurrence of our brains using binary search without even realizing it. Imagine the problem as if it was a riddle or brain teaser you had to solve. Pay attention to the strategies you develop, the way you hold onto information, and the calculations you make."},
            {"type" : "header2", "value" : "4. Solve some examples."},
            {"type" : "text", "value" : "This goes further with the idea of understanding the problem, and coming up with a human solution. Doing examples helps you understand commonalities between solutions to the problem. Observe how the solution relates to the inputs. Is there more than one solution? Are some solutions easier to calculate than others? These observations will lead to reduced time complexities in your solution."},
            {"type" : "header2", "value" : "5. Go through your tool box of data structures and algorithms."},
            {"type" : "text", "value" : "Think about how the structure of the data affects your solution. Think about how a data structure or algorithm could mitigate inefficiencies. You will likely discover optimizations before you exhaust your options."},
            {"type" : "header2", "value" : "6. Pitch the optimized solution. Don't forget to mention time complexity!"},
            {"type" : "text", "value" : "Most people skip steps 2, 3, 4, jump straight to 5 and try to pitch their best attempt at an optimized solution. This doesn't work because they didn't spend time understanding the problem. They become dissuaded from pitching another solution and spend a lot of time unsure what to do next. If you get here and still need to optimize. Go back and repeat steps 3-5. Remember to use recognizable terms when explaining, and be proactive in mentioning complexities."},
            {"type" : "header2", "value" : "7. Code."},
            {"type" : "text", "value" : "Getting the right answer on step 6 doesn't mean you passed the interview. Getting the wrong answer on step 6 doesn't mean you failed the interview. The next part of the interview is much more important. The simplicity and elegance with which you can do this part will set you apart."},
            {"type" : "text", "value" : "One time during an interview <b>I struggled heavily on optimizing the problem.</b> In fact, I spent 35 minutes coming up with a solution. The interviewer might have even nudged me in the right direction. With 10 minutes left, <b>he'd probably decided to not pass me on that interview.</b> Yet, I managed to code the solution in 5 minutes. The interviewer wanted to make sure my solution worked on some examples. So we ran my code, debugged typos, and had a working solution we tested against for the remaining 5 minutes. <b>I passed that interview.</b>"},
            {"type" : "text", "value" : "Without repeating myself too much, here are the things to remember while coding:"},
            {"type" : "text-list", "value" : [
                "- Explain every line of code. To yourself and the interviewer.",
                "- Remind the interviewer where variables are coming from.",
                "- Utilize your templates",
                "- Listen to the interviewer"
                ]},
            {"type" : "text", "value" : "Your success with coding interviews lies in your own hands. You need to be self critical to identify your weaknesses, and mindful to play to your strengths. I hope this article enables your developlment and helps you accomplish your goals."},
            {"type" : "header2", "value" : "If you found this article helpful please share it with your friends!"}
        ]
    },
    {
        "name" : "3 ways to stand out at a career fair: Advice to students in software",
        "image": "images/impala.jpg",
        "date" : "June 1st, 2019",
		"sections" : [
            {"type" : "text", "value" : "We've all been there. Standing in a 10 person line for the Amazon booth at a campus career fair. You reach the front of the line, try to strike a conversation with the recruiter and pray they place your resume in the <b><b><i>\"potential candidates\"</i></b></b> pile instead of the <b><b><i>\"soon to be trashed\"</i></b></b> one. Career fairs can be a gold mine when it comes to personal development, yet to many people they can feel like a minefield. After attending many myself, I've learned what it means to be successful at a career fair and the steps you should take to stand out."},
            {"type" : "header", "value" : "1. Present yourself"},
            {"type" : "text", "value" : "Standing out from the crowd is critical to your success at a career fair. How you present yourself is a large part of this. You should obviously dress business casual and look presentable, but <b>presenting yourself extends beyond your attire and grooming</b>. You must adjust how you carry yourself, what you're carrying, and the persona you reflect. Whenever possible, carry only a binder or clipboard for your resume, and a paper and pen to write stuff down. Carrying less makes you feel more open and this will reflect in the way you communicate with others. The pen and paper are valuable to jot something down without losing the conversational momentum. Keeping your resume in your hand makes it easier for you or the recruiter to lead the conversation towards the end goal â€” the recruiter taking a look at your resume."},
            {"type" : "text", "value" : "Your resume stands as the ultimate presentation of your skills and it should be worth introducing into the conversation. If you're bringing up your resume (which you definitely should be doing), it should leave the recruiter with a better representation of you than your conversation with them. There's no point in spending 4 hours at a career fair handing out a resume that you only spent an hour writing. To stand out, a bizarre yet effective trick I often use is to print my resume on higher quality paper. Using premium paper can subconsciously affect how people look at your resume and the value they attach to it. You should still keep regular prints handy and only hand the high-quality ones to companies you feel will appreciate the extra effort. A good rule of thumb is to use the premium paper if you're handing the resume to a person, as it will be worth the reaction (believe me, they will have a reaction). Polishing your resume is <b>worth it</b>, but filling it is more important. The number one issue many undergrads face, is they donâ€™t have enough to write about on their resume. Until you have enough work experience, itâ€™s fair to write in detail about your side projects. Be sure to include technologies you used, features you implemented, and lessons you learned."},
            {"type" : "header", "value" : "2. Talk to people and seek growth"},
            {"type" : "text", "value" : "Your one and only goal at a career fair should be to make other people remember you. Take some time to talk to the smaller companies attending, and if you can, talk to every company attending. The representatives will be nicer to you, listen more attentively, and are more likely to provide you with an opportunity. Remember, career fairs are for personal development. There's no harm in learning about companies in your industry, even if you're not interested in working there. Having this general awareness will help you converse better with those in the same field as you. Small companies also serve as great conversation practice, where you can perfect how to talk about yourself and your experience. It's natural to feel shy at career fairs, youâ€™re in a large open space surrounded by people who seem to be more interesting than you. The only way to overcome this shyness and become your most presentable self is to engage in conversations."},
            {"type" : "text", "value" : "Career fairs are a <b>goldmine</b> for self-development. Every career fair you attend provides learnings you can improve upon."},
            {"type" : "text", "value" : "<b>Want to know what the other candidates are doing right?</b>"},
            {"type" : "text", "value" : "<b><i>You can observe them in action at a career fair.</i></b>"},
            {"type" : "text", "value" : "<b>Have you ever wondered what recruiters notice first when viewing your resume?</b>"},
            {"type" : "text", "value" : "<b><i>You can observe their reactions at a career fair!</i></b>"},
            {"type" : "text", "value" : "Every once in a while, I explicitly ask recruiters to critique my resume at a career fair. There's nothing to lose in this situation. Additionally, it requires them to take a closer look at your resume and perhaps notice something they earlier hadnâ€™t. One of the critical ingredients to becoming an expert in any subject is rapid feedback. Thereâ€™s no better place than a career fair to collect this feedback on your career-building skills."},
            {"type" : "header", "value" : "3. Ask the right questions"},
            {"type" : "text", "value" : "We've established that conversations are important at career fairs, but what should you talk about? Recruiters are always being asked questions, so focus on asking those that matter, and make you stand out. My favourite question to ask tech companies is: <b><b><i>\"What technologies do you work with?\"</i></b></b> Any recruiter will know to list the frameworks and languages they are looking for and this helps you better understand how to advertise yourself to that company. If you're lucky enough to be speaking with somebody technically inclined, you can respond to their answer with: <b><b><i>\"Oh, you work with X technology? I recently used that for a project I built that does Y. I found it to be very powerful for A, B and C but the learning curve for D was very challenging.\"</i></b></b> This simple pattern initiates an engaging conversation, while subtly advertising your skills as a programmer."},
            {"type" : "text", "value" : "For larger tech companies, they'll generally have work opportunities for all sorts of languages so the same pattern might not fare as well. Instead, when you get to the front of the line, it's worth getting straight to the point. Introduce yourself, explain what type of position you're looking for, and your experience until this point. Next, ask the recruiter what their company is looking for. If you fit their needs, it's as simple as handing them your resume and pointing out where you meet the criteria. Usually, the recruiter will highlight those relevant areas and hold on to the resume. Truthfully, I've only ever seen students who exactly fit the criteria move forward with a large tech company from a career fair. Most times, it's not worth your time to approach these companies at a career fair, and they will likely tell you to apply online anyway."},
            {"type" : "text", "value" : "Your measure of success at a career fair shouldnâ€™t only be the impressions you left on people but also the impressions they left on you. There is a lot to learn from other people in your industry, and when you approach these events as a learning opportunity your success is assured."},
            {"type" : "text", "value" : "<b>Share this post with someone you believe would learn from this!</b>"}
            
        ]
    },
    {
        "name" : "How I landed jobs at Google, Facebook and Uber: Advice to students in software",
        "image": "images/ask.png",
        "date" : "May 28th, 2019",
		"sections" : [
            {"type" : "text", "value" : "I often get questions from younger students, about steps I took to land high-profile, competitive internships, and a full-time job at Google. Firstly, I applaud any student who takes the time to look ahead, and takes the initiative to reach out. These are my three pieces of advice to incoming university first years in software:"},
            {"type" : "header", "value" : "1. Get work experience early."},
            {"type" : "text", "value" : "This means get started <b>today</b> on finding a summer job after first year, and try to get a part-time job during the school year. I worked part-time during first year for 10 hours a week doing Android development and while it is not necessary, getting experience early sets you up to dominate the job market later on. Working part-time can also be a great way to get your foot in the door, in my case, I was able to work at the same company after first year for a summer internship. For the bigger companies, your chances of getting an interview after 1st year are very low, and only possible after 2nd year if you have work experience. If you are in a co-op program or your school happens to be a <b><i>\"target school\"</i></b> for these companies, you will have better chances in securing an offer after 2nd year (I'm looking at you Waterloo students). Landing an interview as a 3rd year student is the most likely as companies are looking to convert summer interns into full-time employees after graduation. Everyone follows a different trajectory and there is no clearly marked path to these companies. Luck is also a major factor and as such, do not be discouraged if you get rejected the first <b><i>X</i></b> times. Until then, aim to get early experience in your reach, and build up your skills so you can ace the interview when the opportunity comes. The latter is an art form of its own and worthy of a seperate post about my learnings in this matter."},
            {"type" : "header", "value" : "2. Build projects on the side and follow your heart."},
            {"type" : "text", "value" : "Side projects look good on resumes, but they are also valuable because you build skills you do not learn in school. I have been working on side projects since high school and can not credit them enough. Not many people look at them this way but in my opinion they serve as opportunities to talk about your learnings with fellow programmers. To share a quick anecdotal example of this, I met the person who got me an interview at <b>Uber</b> when he looked to my screen and asked me about what I was working on. A good side project to get started with is building a personal website: you can build basic skills, learn to debug, and have a digital business card you can direct people towards to learn more about you. I began working on <b>vanshil.com</b> in 12th grade and have been regularly iterating it over the years. It has become so much a part of me that rather than needing to bring it up near the end of a conversation, it now precedes me and I often meet people who have seen my website before even meeting me."},
            {"type" : "text", "value" : "The <b><b><i>follow your heart</i></b></b> part of this point is to tell you it is ok to prioritize work that motivates you and maximizes your learning. When you get started in university, it is easy to become overwhelmed with the change and chase grades as you did in high school. While good grades can <b><i>potentially</i></b> help you secure an interview, average grades will not drag you down if you have built an impressive resume outside of school. The only exceptions to this are work opportunities that come from a school related career portal. However, if you are in software you will quickly learn that there are more (and probably better) opportunities outside of this gated community. This is <b>not an excuse</b> to fail school, my grades were far from failing when I was in school, but only to help you realize the lack of impact your GPA has on your career. I have only been asked about my GPA <b>once at a career fair</b> in my four years of going to career fairs and submitting job applications. Keep in mind however, if you are interested in any type of higher education beyond an undergrad, your GPA does matter and there is nothing wrong with making that a priority."},
            {"type" : "header", "value" : "3. Seek help."},
            {"type" : "text", "value" : "Reach out to older students and those who inspire you. The other two points in this post are advice commonly found online, but I see a minority of younger students following this last point. In my opinion it is probably the most important. My career path would not be the same if I had not made an impression on older students whom I met at hackathons or personally contacted. They were the people who referred me to big companies, answered all of my questions, vetted my resumes, and helped me prep for the interviews. Having heard many other people's stories, I now know that almost nobody makes it on their own. You need to be giving your 100% <b>and</b> seek help from those above you. I have never been turned down from asking for advice and have always left these encounters with more knowledge. On the flip side, everyone loves sharing advice and I have never felt it a chore to help those who reach out to me. When approached the right way and with respect for the other individualâ€™s time, you have nothing to lose and everything to gain by seeking guidance. You are going to meet a lot of new people in the next few months so take the time to ask yourself, \"What can I learn from this individual?\" Over time you will amass enough knowledge that you can pay it forward to the generation that follows you."}
            
        ]
    }
]}
