[{"type" : "header", "value" : "Coding interviews unravelled."},
{"type" : "text", "value" : "When people reach out to me, the message I get most often is:"},
{"type" : "text", "value" : "\"Hey, I have an interview with <FAANG Company> next week, any advice for coding interviews?\""},
{"type" : "text", "value" : "My answer is almost always, \"I'll mock interview you.\""},
{"type" : "text", "value" : "I've been conducting quite a few mock coding interviews over the past few months. It's time to share the feedback I've found myself repeating to each interviewee."},
{"type" : "header", "value" : "An Anecdote"},
{"type" : "text", "value" : "On February 1st 2017, I received an email:"},
{"type" : "text", "value" : "\"Hey this is Uber, we saw your resume and we'd like to interview you two weeks from now!\" I had just gotten home from my first ever technical interview for a startup in Toronto. They'd asked me to find duplicate elements in a list and I wasn't able to produce the solution. The interviewer literally had to tell me to \"use a hash map to complete the process in O(n) time\". I had two weeks to prepare for the biggest opportunity in my career. What followed was a set of decisions and actions that resulted in me landing my first job in Silicon Valley."},
{"type" : "header", "value" : "Preparation"},
{"type" : "text", "value" : "You have two weeks to prepare for the biggest interview of your career! What do you do? You need to yield the most output from your time in the coming days. You need to be cutthroat with inefficiencies and optimize your learnings. In all areas of preparation, remember:"},
{"type" : "text", "value" : "https://science.ubc.ca/students/blog/how-to-increase-your-productivity-by-doing-less"},
{"type" : "text", "value" : "80% of the results come from 20% of the efforts."},
{"type" : "text", "value" : "80% of the problems are solved with 20% of the concepts."},
{"type" : "text", "value" : "80% of the interview score comes from 20% of the time."},
{"type" : "header", "value" : "1. Get a copy of \"Cracking the Coding Interview\""},
{"type" : "text", "value" : "CTCI is the Bible for coding interviews. It's $30 on Amazon, and well worth the investment. Plus, if you actually buy it, you'll feel guilty if you didn't read it!"},
{"type" : "text", "value" : "Carry this book everywhere you go. Read it on the bus. Read it before you sleep. Read it on the toilet."},
{"type" : "text", "value" : "I acknowledge its a dense book so here is my short-list on must read chapters:"},
{"type" : "header", "value" : "Introduction"},
{"type" : "text", "value" : "I: The Interview Process"},
{"type" : "text", "value" : "II: Behind the Scenes - If relevant to your interview"},
{"type" : "text", "value" : "VI: Big O - Even if you learned it in school. Relearn it."},
{"type" : "text", "value" : "VII: Technical Questions - This is my favourite chapter, read it twice if you have the time"},
{"type" : "text", "value" : "IX: Data Structures"},
{"type" : "text", "value" : "Chapters: 1-4, 7-10"},
{"type" : "text", "value" : "- For the chapters here you don't need to go through \"Interview Questions\" sections. Although definitely make sure you understand the examples they solve before that section."},
{"type" : "text", "value" : "XI: Advanced Topics"},
{"type" : "text", "value" : "- If you have fundamentals in CS theory, or have a lot of time, these advance topics can occasionally come clutch. If it feels too dense, skip this chapter, the ROI on your time is not worth it. 80% of problems don't require these concepts."},
{"type" : "header", "value" : "2. Seek mentorship."},
{"type" : "text", "value" : "Message every person you know who has passed a technical interview at a large tech company. This point is so often overlooked but its value is clear. You get to tap into their learnings without wasting any time making the same mistakes. Ask them for an hour of their time (more if you can). Get them to mock interview you and provide feedback."},
{"type" : "text", "value" : "I did exactly this. I messaged everyone I knew by name who had interned at a respectable company, 5 people in total. Want to know the best part? Not a single one of them turned me down."},
{"type" : "text", "value" : "People are more willing to give advice than you'd expect."},
{"type" : "header", "value" : "3. Focus on problem solving."},
{"type" : "text", "value" : "One preparation strategy is to learn as many problems as you can find. This technique can work if you can remember \"the trick\" to a bunch of problems. The trick is usually knowing which data structure to use, or which algorithm to apply. This isn't enough. You'll hear all types of anecdotes from your peers about how they \"knew the answer, but couldn't code it out\"."},
{"type" : "text", "value" : "In my case, I attempted about 25 Leetcode questions in the two weeks before my interviews. That's 25 questions total between my preparations for Uber, Facebook and Google. This is wildly on the lower end for preparation. Yet, I succeeded because I focused on problem solving and communication. When doing mock interviews, I was improving my communication. I was learning about which thoughts I should share, and which bad ideas I should keep to myself. I built a structured strategy to solving coding problems."},
{"type" : "text", "value" : "The \"Technical Questions\" chapter in CTCI is a great start to figuring out your own strategy. While practicing problems you want to look back and think about your approach. Which realizations did you struggle to come across? Which options did you not consider? Which parts of the problem did you struggle to figure out, or struggle to code out?"},
{"type" : "header", "value" : "4. Strengthen your communication skills."},
{"type" : "text", "value" : "Communication of ideas is a key metric evaluated during a coding interview. Every line of code written should be explained to the interviewer. The benefits of this are two-fold. Firstly, you ensure the interviewer is following along. Second, you double check yourself. If you say something that doesn't make sense, you've caught yourself making a mistake. Make it a habit to refer back to the inputs of your calculations. This is another technique that enables understanding and forces you to double check. For example:"},
{"type" : "text", "value" : "\"We'll use X and Y here to compute Z. X comes from the previous iteration of the loop and Y is the element we extracted during this iteration.\" "},
{"type" : "text", "value" : "As with training your muscles in the gym, the key to strengthening this skill is isolation."},
{"type" : "text", "value" : "- Look back at a simple problem you already know how to solve."},
{"type" : "text", "value" : "- Attempt to program the solution as if you were explaining your code to an interviewer."},
{"type" : "text", "value" : "- Note down areas where you struggled to get your thoughts across."},
{"type" : "text", "value" : "- Repeat until it's perfect."},
{"type" : "text", "value" : "- Move on to more complex problems."},
{"type" : "header", "value" : "5. Practice using recognizable terms"},
{"type" : "text", "value" : "The large bulk of concepts and techniques can be boiled down into simpler terms. What do I mean by this? Consider a problem requires you to use a sliding window to analyze a list."},
{"type" : "text", "value" : "You could communicate this by saying:"},
{"type" : "text", "value" : "\"Weâ€™ll use a pointer on the left side of the list and one a few indices later and then we'll move the left one to the right if the element there is odd, and we'll move the right one if the element is even.\""},
{"type" : "text", "value" : "Notice how this sentence is difficult to read and even harder to comprehend? Instead you could say:"},
{"type" : "text", "value" : "\"We'll be using a sliding window to pass through the list. We will increment the beginning pointer on odd numbers and the end pointer on even numbers\""},
{"type" : "text", "value" : "The key take-away is to use standard terms that show your ideas in a recognizable manner. Both sentences describe using a sliding window and incrementing the pointers. Yet, the second one actually mentions the terms. The interviewer will immediately understand your approach instead and be able to provide feedback or ask further questions. Here is another example:"},
{"type" : "text", "value" : "Good"},
{"type" : "text", "value" : "\"We'll be iterating through the list and on each iteration we will compute X. If Y is greater than Z then we know X to be true for that iteration.\""},
{"type" : "text", "value" : "Bad"},
{"type" : "text", "value" : "\"We'll be going through the list and every time we go through the list we'll check Y and Z and if Z is greater than Y then we'll know that X is true for that time.\""},
{"type" : "text", "value" : "The first sentence practically reads off as code, the second one is hard to follow."},
{"type" : "text", "value" : "Most of these terms come straight from chapters or strategies from CTCI. You can practice communicating these concepts using point 4. This method is great because it sets you up to program the solution with the same building blocks."},
{"type" : "header", "value" : "6. Practice templates for different algorithms"},
{"type" : "text", "value" : "Much like the previous point, this point relies on \"chunking\". Chunking is a psychological strategy our brains use to group together information. We can recall the details of the chunk simply by recalling the name of that specific chunk. https://en.wikipedia.org/wiki/Chunking_(psychology)"},
{"type" : "text", "value" : "When it comes to algorithms, the fundamental code usually follows a pattern. In fact the underlying pattern is usually how you'll learn the algorithm in class. Why not commit these patterns as templates in your memory. Sticking to a template results in less mistakes and faster coding time."},
{"type" : "text", "value" : "For example, look at the solutions to 3 problems involving recursion. Try and structure the code so they all follow a similar pattern. The common code between the solutions is the template you should use. The other lines of code are examples of variations you'll need to make to adapt the template to the problem."},
{"type" : "text", "value" : "The final benefit will come in your communication. Knowing the algorithm template ensures you use the correct terms when explaining."},
{"type" : "header", "value" : "7. Know your interview language."},
{"type" : "text", "value" : "The programming language you chose for your interview is crucial to your performance. I prefer using Python because of its versatility and concise syntax. Regardless of which language you choose, make sure you're comfortable with it. Make a cheatsheet of trivial procedures and memorize it. You should not need to figure out these things during your interview. A good example is inserting an element at a given index within a list. It's very easy to be off by one when implementing this so it looks very good when you can do it in your first try. Having these code sections prepared will put you ahead in interviews. Like the template point above, it also ensures you make less mistakes when writing your code."},
{"type" : "header", "value" : "8. Study the theory."},
{"type" : "text", "value" : "This point is doubling down on reading CTCI. Make sure you're familiar with data structures, algorithms and their time/space complexities. Data structures and algorithms are like tools you can use in your toolbox. Time and space complexities are like the specifications for the tool.  You need to know both because it will impact your decision on using that tool for a given task."},
{"type" : "text", "value" : "Make sure you know the time complexity of your algorithm. For any potential solution you provide, donâ€™t forget to mention the time complexity. This looks very good on an interview and it forces you to be thoughtful of your decisions. Go in with the assumption that an interviewer is always going to ask you the time complexity. With that in mind try to proactively mention it as you describe solutions. This indicates to the interviewer that you're thinking about the time complexity."},
{"type" : "text", "value" : "I had an instance where an interviewee struggled to decide between two approaches. It wasn't until I asked him the time complexities that he realized, they had the same time complexity. Thinking about it proactively simplifies your decision making during an interview. You'll also be more confident you made the right choice."},
{"type" : "header", "value" : "The Interview"},
{"type" : "text", "value" : "I mentioned earlier that I have a structured strategy for tackling coding problems. A lot of this was initially based off of the strategies outlined in CTCI, I still recommend you check that book out. This structure worked well for me, you should take it and adapt to your strengths."},
{"type" : "text", "value" : "Interviewer: *outlines problem*"},
{"type" : "text", "value" : "1. Repeat the problem to the interviewer in your own words. The key is to use your own words so that you ensure you understand the problem. Regurgitating the problem as stated doesn't ensure anything. The interviewer will correct you in your misunderstandings. This is also the part where you confirm behaviour for edge cases you came up with and any assumptions you made."},
{"type" : "text", "value" : "2. Provide a brute force solution. Make sure it actually solves the problem and you provide the time complexity. This solution should come very quickly and it will do two things."},
{"type" : "text", "value" : "- Confirm you understand the problem."},
{"type" : "text", "value" : "- Give you a base solution to work off and optimize"},
{"type" : "text", "value" : "If your solution doesn't work the interviewer will most likely let you know."},
{"type" : "text", "value" : "3. Solve the problem as a human. This is honestly my favourite take-away from CTCI. Our brains adapted for problem solving and we can write code to replicate our solutions. A good example is searching for a page number in a book. Most people will flip to halfway through the book, look at the page number and then repeat in a smaller half until they get close enough to rifle through the pages. This is an occurrence of our brains using binary search without even realizing it. Often our approaches to solving problems are applicable algorithms we can program. Try and imagine the problem as if it was a riddle or brain teaser you had to solve. Pay attention to the strategies you develop and the way you hold onto information."},
{"type" : "text", "value" : "4. Solve some examples. This goes further with the idea of understanding the problem, and coming up with a human solution. Doing examples helps you understand commonalities between solutions to the problem. Observe how the solution relates to the inputs. Is there more than one solution? Are some solutions easier to calculate than others? These observations will lead to algorithms with reduced time complexities."},
{"type" : "text", "value" : "5. Go through your tool box of data structures and algorithms. Think about how the structure of the data affects your solution. Think about how the data structure or algorithm could help mitigate inefficiencies. When you've exhausted these options you will have found an optimized solution."},
{"type" : "text", "value" : "6. Pitch your optimized solution. Don't forget to mention time complexity!"},
{"type" : "text", "value" : "Most people skip steps 2, 3, 4, jump straight to 5 and try to pitch their best attempt at an optimized solution. This doesn't work because they didn't spend time understanding the problem. They become dissuaded from pitching another solution and spend a lot of time unsure what to do next. If you get here and you still need to optimize. Go back and repeat steps 3-5."},
{"type" : "text", "value" : "7. Code. Getting the right answer on step 6 doesn't mean you passed the interview. Getting the wrong answer on step 6 doesn't mean you failed the interview. The next part of the interview is much more important. The simplicity and elegance with which you can do this part will set you apart."},
{"type" : "text", "value" : "Hereâ€™s an anecdote that drives this point home. One time during an interview I struggled heavily on optimizing the problem. In fact, I spent 35 minutes coming up with a solution. The interviewer might have even nudged me in the right direction. With 10 minutes left, he'd probably decided to not pass me on that interview. Yet, I managed to code the solution in 5 minutes. In this particular interview I actually had to run my code and test it on some examples he provided me. So we ran my code, debugged some typos, and had a working solution that we tested for the remaining 5 minutes. I passed that interview."},
{"type" : "text", "value" : "Without repeating myself too much, here are the things to remember while coding:"},
{"type" : "text", "value" : "- Explain every line. To yourself and the interviewer."},
{"type" : "text", "value" : "- Remind the interviewer where variables are coming from."},
{"type" : "text", "value" : "- Stick to the templates"},
{"type" : "text", "value" : "- Listen to the interviewer"},
{"type" : "text", "value" : "Interviewers want you to succeed on the interview. They'll often hint at your mistakes. Pay attention and catch these hints."},
{"type" : "text", "value" : "At the end of the day, your luck with coding interviews lies in your own hands. Youâ€™ll need to be mindful and self critical in identifying your weaknesses, and playing to your strengths. I hope this article plays its part in assisting you towards self improvement and accomplishing your goals."},
{"type" : "header", "value" : "If you found this article helpful please share it with your friends!"},
]